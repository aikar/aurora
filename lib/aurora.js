/**:Compiled with Aurora v0.2.1 with Streamline and Traceur Compilers. --DO NOT EDIT THIS FILE!!! Edit aurora_.js instead and recompile with Aurora! :*/ var __g=typeof global!=='undefined'?global:window;__g=(__g.__streamline||(__g.__streamline={}));__g.setEF=__g.setEF||function(e,f){e.__frame = e.__frame||f};var __srcName='undefined_.js'; function __func(_, __this, __arguments, fn, index, frame, body){ if (!_) { return __future.call(__this, fn, __arguments, index); } frame.file = __srcName; frame.prev = __g.frame; __g.frame = frame; try { body(); } catch (e) { __g.setEF(e, frame.prev); __propagate(_, e); } finally { __g.frame = frame.prev; } } function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); } function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } } function __trap(err){ if (err) { if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } } var fs = require("fs"), path = require("path"), traceur = require("traceur/lib/transform.js"), streamline = require("streamline/lib/compiler/transform.js"), exec = require("child_process").exec;

var directoryIgnoreList = ["CVS",".svn",".git",".hg",".bzr",];
function isAlreadyCompiled(input, output, banner, project) {
 var outstat = mtime(output);
 if (!outstat) {
 return false; };

 var inpstat = mtime(input);
 if ((inpstat > outstat)) {
 return false; };

 var oldContent = fs.readFileSync(output).toString();
 if ((oldContent.substr(0, banner.length) !== banner)) {
 return false; };

 return oldContent;};

function compileFile(input, project) {
 var ext = project.extension;
 if ((input.substr((input.length - ext.length)) !== ext)) {
 return null; };

 var output = (input.substr(0, (input.length - ext.length)) + ".js");
 var options = project.streamlineoptions;
 var content = fs.readFileSync(input).toString();
 var SB = parseShebang(content);
 var shebang = SB[0], le = SB[2], banner = (((((("/**:" + "Compiled with Aurora v") + project.auroraVersion) + " with Streamline and Traceur Compilers. --") + "DO NOT EDIT THIS FILE!!! Edit ") + path.basename(input)) + " instead and recompile with Aurora! :*/");
 if ((oldContent = isAlreadyCompiled(input, output, ((shebang + le) + banner), project))) {
 return [output,oldContent,]; };

 content = (le + SB[1]);
 content = traceur(content, input);
 content = streamline.transform(content, options);
 content = (((SB[0] + le) + banner) + content);
 fs.writeFileSync(output, content);
 if (project.verbose) { console.log("Successfully transformed", input.replace((process.cwd() + "/"), ""), "to", output.replace((process.cwd() + "/"), "")); };
 return [output,content,];};

var project = null;
function getProject() {
 if (project) {
 return project; };

 var base = process.cwd();
 try {
 var packagejson = fs.readFileSync((base + "/package.json")).toString();
 var pkg = JSON.parse(packagejson);
 } catch (e) {
 e.message = ("Error parsing package.json, you really should make one for your project!" + e.message);
 throw e; };

 var projectjson = fs.readFileSync((base + "/aurora.json")).toString();
 project = JSON.parse(projectjson);
 project.auroraVersion = pkg.version;
 project.extension = (project.extension || "_.js");
 if ((project.dirs && Array.isArray(project.dirs))) {
 project.dirs = project.dirs.map(function(dir) {
 return path.resolve(base, dir); }); }

 else {
 throw new Error("aurora.json needs a minimum of a dirs key (array of directories to scan/compile)"); };

 return project;};

function compileProject(_) { var base, project, dirs; var __frame = { name: "compileProject", line: 66 }; return __func(_, this, arguments, compileProject, 0, __frame, function __$compileProject() {
 base = process.cwd();
 project = getProject();
 project.verbose = 1;
 dirs = [];
 project.dirs.forEach(function(file) {
 compileDir(file, project, dirs); }); _(); });};


function compileDir(dir, project, dirs) {
 dirs = (dirs || []);
 var realdir = fs.realpathSync(dir);
 if ((dirs.indexOf(realdir) == -1)) {
 dirs.push(realdir);
 var files = fs.readdirSync(realdir);
 files.forEach(function(file) {
 var full = ((realdir + "/") + file);
 var stat = fs.statSync(full);
 if ((stat.isDirectory() && (((project.directoryIgnorelist || directoryIgnoreList)).indexOf(file) == -1))) {
 compileDir(((realdir + "/") + file), project, dirs); }
 else if (stat.isFile()) {
 compileFile(full, project); }  ; });


 return files; };

 return [];};

module.exports = {
 getProject: getProject,
 compileFile: compileFile,
 compileProject: compileProject};

function parseShebang(content) {
 if (((content[0] === "#") && (content[1] === "!"))) {
 var n = content.indexOf("\n");
 var le = "\n";
 if ((n != -1)) {
 var shebang = content.substr(0, n);
 if ((shebang[(shebang.length - 1)] == "\r")) {
 le = "\r\n";
 shebang = shebang.substr(0, (shebang.length - 1)); } ;

 content = content.substr((n + 1));
 return [shebang,content,le,]; } ; };


 return ["",content,"",];};

function mtime(fname) {
 try {
 return fs.statSync(fname).mtime;
 } catch (ex) {
 return 0; };};