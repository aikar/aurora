/*** Generated by streamline 0.1.44rt1 - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/compiler/runtime')(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g; var fs = require("fs");









var fspath = require("path");
var transform = require("./transform");

function _exists(callback, fname) {
 fspath.exists(fname, function(result) {
 callback(null, result); });};



function _mkdir(dir, mode, _) { var p; var __frame = { name: "_mkdir", line: 20 }; return __func(_, this, arguments, _mkdir, 2, __frame, function __$_mkdir() {
 p = fspath.dirname(dir);
 return _exists(p, __cb(_, __frame, 2, 6, function ___(__0, __2) { var __1 = !__2; return (function __$_mkdir(__then) { if (__1) {
 return _mkdir(p, mode, __cb(_, __frame, 3, 2, __then)); } else { __then(); } ; })(function __$_mkdir() {
 return fs.mkdir(dir, mode, __cb(_, __frame, 4, 1, _)); }); })); });};


function mtime(_, fname) { var __frame = { name: "mtime", line: 27 }; return __func(_, this, arguments, mtime, 0, __frame, function __$mtime() { return (function __$mtime(_) {
 return _exists(__cb(_, __frame, 1, 8, function ___(__0, __1) { var __2 = __1; return (function __$mtime(__then) { if (__2) { return fs.stat(fname, __cb(_, __frame, 1, 28, function ___(__0, __4) { var __3 = __4.mtime; return _(null, __3); })); } else { __then(); } ; })(function __$mtime() { return _(null, 0); }); }), fname); })(__cb(_, __frame, -26, 22, _)); });};

function parseShebang(content) {
 if (((content[0] === "#") && (content[1] === "!"))) {
 var n = content.indexOf("\n");
 var le = "\n";
 if ((n != -1)) {
 var shebang = content.substr(0, n);
 if ((shebang[(shebang.length - 1)] == "\r")) {
 le = "\r\n";
 shebang = shebang.substr(0, (shebang.length - 1)); } ;

 content = content.substr((n + 1));
 return [shebang,content,le,]; } ; };


 return ["",content,"",];};













exports.loadFile = function exports_loadFile__1(_, path, options) { var ext, basename, dirname, js, js_, dontSave, mtimejs, mtimejs_, banner, content, shebangparse, shebang, le, transformed; var __frame = { name: "exports_loadFile__1", line: 58 }; return __func(_, this, arguments, exports_loadFile__1, 0, __frame, function __$exports_loadFile__1() {
 options = (options || { });
 options.sourceName = path;

 ext = fspath.extname(path);
 basename = fspath.basename(path, ext);
 dirname = fspath.dirname(path);



 dontSave = (basename[(basename.length - 1)] == "_");
 if (dontSave) {
 path = path.substring(0, (path.length - 1));
 js = (((dirname + "/") + basename.substr((basename.length - 1))) + ext);
 js_ = path;
 options.lines = (options.lines || "preserve"); }

 else {
 js = path;
 js_ = ((((dirname + "/") + basename) + "_") + ext);
 options.lines = (options.lines || "mark"); } ;


 return mtime(__cb(_, __frame, 23, 15, function ___(__0, __2) { mtimejs = __2;
 return mtime(__cb(_, __frame, 24, 16, function ___(__0, __3) { mtimejs_ = __3;

 banner = transform.banner(); return (function __$exports_loadFile__1(__then) {
 if (mtimejs_) {
 return fs.readFile(js_, "utf8", __cb(_, __frame, 28, 16, function ___(__0, __4) { content = __4;
 shebangparse = parseShebang(content);
 shebang = shebangparse[0];
 le = shebangparse[2];
 content = shebangparse[1];

 banner = ((shebang + le) + banner); return (function __$exports_loadFile__1(_) {
 var __1 = mtimejs; if (!__1) { return _(null, __1); } ; return fs.readFile(js, "utf8", __cb(_, __frame, 35, 31, _)); })(__cb(_, __frame, -57, 22, function ___(__0, __5) { transformed = __5;
 if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {



 return _(null, transformed); } ;

 if (options.verbose) {
 console.log(((("streamline: transforming: " + js_) + " to ") + js)); } ;

 transformed = ((shebang + banner) + transform.transform(content, options));
 if (!dontSave) {

 try {
 fs.writeFile(js, transformed, "utf8");

 } catch (ex) {  }; } ;


 return _(null, transformed); })); })); } else {


 return fs.readFile(js, "utf8", __cb(_, __frame, 57, 16, function ___(__0, __6) { content = __6;
 if (options.compileAnyways) {

 shebangparse = parseShebang(content);
 shebang = shebangparse[0];
 content = (shebangparse[2] + shebangparse[1]);
 return _(null, transform.transform(content, options)); }
 else {
 return _(null, content); } ; __then(); })); } ; })(_); }), js_); }), js); });};




function mtimeSync(fname) {
 try {
 return fs.statSync(fname).mtime;

 } catch (ex) {
 return 0; };};






exports.transformModule = function(content, path, options) {
 options = (options || { });
 options.sourceName = path;

 var ext = fspath.extname(path);
 var basename = fspath.basename(path, ext);
 var dirname = fspath.dirname(path);

 var js, js_;

 var dontSave = (basename[(basename.length - 1)] == "_");
 if (dontSave) {
 path = path.substring(0, (path.length - 1));
 js = (((dirname + "/") + basename.substr((basename.length - 1))) + ext);
 js_ = path;
 options.lines = (options.lines || "preserve"); }

 else {
 js = path;
 js_ = ((((dirname + "/") + basename) + "_") + ext);
 options.lines = (options.lines || "mark"); };


 var mtimejs = mtimeSync(js);
 var mtimejs_ = mtimeSync(js_);

 var banner = transform.banner();

 if (mtimejs_) {
 if (!dontSave) {
 content = fs.readFileSync(js_, "utf8"); };
 var shebangparse = parseShebang(content);
 var shebang = shebangparse[0];
 var le = shebangparse[2];
 content = shebangparse[1];

 banner = ((shebang + le) + banner);
 var transformed = (mtimejs && fs.readFileSync(js, "utf8"));
 if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {



 return transformed };
 if (options.verbose) {
 console.log(("streamline: transforming: " + js_)); };
 var transformed = (banner + transform.transform(content, options));
 if (!dontSave) {

 try {
 fs.writeFileSync(js, transformed, "utf8");

 } catch (ex) {  }; } ;


 return transformed; }

 else {
 if (options.compileAnyways) {

 var shebangparse = parseShebang(content);
 var shebang = shebangparse[0];
 content = (shebangparse[2] + shebangparse[1]);
 return transform.transform(content, options); }
 else {
 return content; } ; };};










exports.compile = function exports_compile__2(_, paths, options) { var flows, failed, cwd;


 function _compile(_, path, options) { var stat; var __frame = { name: "_compile", line: 218 }; return __func(_, this, arguments, _compile, 0, __frame, function __$_compile() {
 return fs.stat(path, __cb(_, __frame, 1, 13, function ___(__0, __2) { stat = __2; return (function __$_compile(__then) {
 if (stat.isDirectory()) {
 return fs.readdir(path, __cb(_, __frame, 3, 17, function ___(__0, __3) { return flows.each(__cb(_, __frame, 3, 3, __then), __3, function __1(_, f) { var __frame = { name: "__1", line: 221 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
 return _compile(__cb(_, __frame, 1, 4, _), ((path + "/") + f), options); }); }); })); } else { return (function __$_compile(__then) {

 if (stat.isFile()) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_compile() {

 return exports.loadFile(__cb(_, __frame, 8, 4, __then), path, options); }); })(function ___(ex, __result) { __tryCatch(_, function __$_compile() { if (ex) {

 console.error(ex.message);
 failed++; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(__then); } ; })(_); })); }); }; var __frame = { name: "exports_compile__2", line: 215 }; return __func(_, this, arguments, exports_compile__2, 0, __frame, function __$exports_compile__2() { flows = require("../util/flows");





 failed = 0;
 options = (options || { });
 if (options.verbose) {
 console.log(("transform version: " + transform.version)); } ;
 if ((!paths || (paths.length == 0))) {
 return _(new Error("cannot compile: no files specified")); } ;
 cwd = process.cwd;
 return flows.each(__cb(_, __frame, 27, 1, function __$exports_compile__2() {


 if (failed) {
 return _(new Error((("errors found in " + failed) + " files"))); } ; _(); }), paths, function __1(_, path) { var __frame = { name: "__1", line: 242 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _compile(__cb(_, __frame, 1, 2, _), fspath.resolve(cwd, path), options); }); }); });};