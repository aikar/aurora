/*** Generated by streamline 0.1.44rt1 - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/compiler/runtime')(__filename),__func=__rt.__func,__cb=__rt.__cb,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g; var streams = require("./streams");
















exports.Reader = function(stream, boundary, options) {
 options = (options || { });
 options.defaultSize = (options.defaultSize || 512);
 if ((!stream.emitter && (typeof stream.on === "function"))) {

 stream = new streams.ReadableStream(stream, options);
 stream.setEncoding((options.encoding || "utf8")); };

 if (!boundary) {
 boundary = "\n"; };
 this.readItem = function readItem__1(_) { var chunks, len, chunk, i; var __frame = { name: "readItem__1", line: 28 }; return __func(_, this, arguments, readItem__1, 0, __frame, function __$readItem__1() {
 chunks = [];
 len = options.defaultSize; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$readItem__1() { __more = false;
 var __2 = stream; if (__2) {
 return stream.read(__cb(_, __frame, 4, 15, function ___(__0, __1) { chunk = __1;
 if ((chunk == null)) {
 stream = null; }
 else {
 i = chunk.indexOf(boundary);
 if ((i >= 0)) {
 stream.unread(chunk.substring((i + boundary.length)));
 chunks.push(chunk.substring(0, i)); return __break(); } else {

 if ((chunk.length == (len + boundary.length))) {
 stream.unread(chunk.substring(len));
 chunks.push(chunk.substring(0, len)); }
 else {
 return _(new Error(((("missing boundary:" + boundary) + " in: ") + chunk))); } ; } ; } ; while (__more) { __loop(); }; __more = true; }), (len + boundary.length)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$readItem__1() {



 return _(null, ((chunks.length == 0) ? null : chunks.join(""))); }); }); };

 this.close = function close__2(_) { var __frame = { name: "close__2", line: 51 }; return __func(_, this, arguments, close__2, 0, __frame, function __$close__2() {
 stream = null; _(); }); };};