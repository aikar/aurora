/*** Generated by streamline 0.1.44 - DO NOT EDIT ***/ "use strict"; var __g=typeof global!=='undefined'?global:window;__g=(__g.__streamline||(__g.__streamline={}));__g.setEF=__g.setEF||function(e,f){e.__frame = e.__frame||f};var __srcName='streamline/lib/streams/jsonRequest_.js'; function __func(_, __this, __arguments, fn, index, frame, body){ if (!_) { return __future.call(__this, fn, __arguments, index); } frame.file = __srcName; frame.prev = __g.frame; __g.frame = frame; try { body(); } catch (e) { __g.setEF(e, frame.prev); __propagate(_, e); } finally { __g.frame = frame.prev; } } function __cb(_, frame, offset, col, fn){ frame.offset = offset; frame.col = col; var ctx = __g.context; return function ___(err, result){ var oldFrame = __g.frame; __g.frame = frame; __g.context = ctx; try { if (err) { __g.setEF(err, frame); return _(err); } return fn(null, result); } catch (ex) { __g.setEF(ex, frame); return __propagate(_, ex); } finally { __g.frame = oldFrame; } } } function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); } function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } } function __trap(err){ if (err) { if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } } var streams = require("./streams");












exports.send = function exports_send__1(_, url, obj) { var json, result; var __frame = { name: "exports_send__1", line: 14 }; return __func(_, this, arguments, exports_send__1, 0, __frame, function __$exports_send__1() {
 json = ((obj && (typeof obj !== "string")) ? JSON.stringify(obj) : obj);




 return streams.httpRequest({ url: url, method: (json ? "POST" : "GET"), headers: { "content-type": "application/json" } }).end(json, "utf8").response(__cb(_, __frame, 6, 14, function ___(__0, __1) { return __1.readAll(__cb(_, __frame, 6, 14, function ___(__0, __2) { result = __2;
 return _(null, JSON.parse(result)); })); })); });};