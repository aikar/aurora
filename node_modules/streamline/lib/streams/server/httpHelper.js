/*** Generated by streamline 0.1.44 - DO NOT EDIT ***/ "use strict"; var __g=typeof global!=='undefined'?global:window;__g=(__g.__streamline||(__g.__streamline={}));__g.setEF=__g.setEF||function(e,f){e.__frame = e.__frame||f};var __srcName='streamline/lib/streams/server/httpHelper_.js'; function __func(_, __this, __arguments, fn, index, frame, body){ if (!_) { return __future.call(__this, fn, __arguments, index); } frame.file = __srcName; frame.prev = __g.frame; __g.frame = frame; try { body(); } catch (e) { __g.setEF(e, frame.prev); __propagate(_, e); } finally { __g.frame = frame.prev; } } function __cb(_, frame, offset, col, fn){ frame.offset = offset; frame.col = col; var ctx = __g.context; return function ___(err, result){ var oldFrame = __g.frame; __g.frame = frame; __g.context = ctx; try { if (err) { __g.setEF(err, frame); return _(err); } return fn(null, result); } catch (ex) { __g.setEF(ex, frame); return __propagate(_, ex); } finally { __g.frame = oldFrame; } } } function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); } function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } } function __trap(err){ if (err) { if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } } var urlHelper = require("streamline/lib/util/url");













exports.HttpStatus = {
 OK: 200,
 Created: 201,
 Accepted: 202,
 NoContent: 204,
 MovedPermanently: 301,
 Found: 302,
 SeeOther: 303,
 NotModified: 304,
 TemporaryRedirect: 307,
 BadRequest: 400,
 Unauthorized: 401,
 Forbidden: 403,
 NotFound: 404,
 MethodNotAllowed: 405,
 NotAcceptable: 406,
 Conflict: 409,
 Gone: 410,
 PreconditionFailed: 412,
 UnsupportedMediaType: 415,
 InternalServerError: 500,
 NotImplemented: 501,
 ServiceUnavailable: 503};


function _classifyMedia(str) {
 if (((str == "*") || (str == "*/*"))) {
 return "*" };
 var lower = str.toLowerCase();
 if ((lower.indexOf("xml") >= 0)) {
 return "xml" };
 if ((lower.indexOf("html") >= 0)) {
 return "html" };
 if ((lower.indexOf("json") >= 0)) {
 return "json" };
 if ((lower.indexOf("text") >= 0)) {
 return "text" };
 if ((lower.indexOf("image") >= 0)) {
 return "image" };
 return "unknown";};


exports.parseAccept = function(str) {

 var accept = ((str || "")).toString().split(/,\s*/).map(function(part, i) {
 var m = part.match(/^([^\s,]+?)(?:;\s*q=(\d+(?:\.\d+)?))?$/);
 return (m && [m[1],Number((m[2] || 1)),i,]);
 }).filter(function(elt) {
 return elt;
 }).sort(function(elt1, elt2) {
 return ((elt2[1] - elt1[1]) || (elt1[2] - elt2[2]));
 }).map(function(elt) {
 var split = elt[0].split(";");
 var result = {
 rawType: split[0],
 type: _classifyMedia(split[0]),
 parameters: { } };

 split.slice(1).forEach(function(str) {
 var pair = str.split(/\s*=\s*/);
 result.parameters[pair[0]] = pair[1]; });

 return result; });


 return ((accept.length > 0) ? accept : [{
 rawType: "*",
 type: "*",
 parameters: { } },]);};



function HttpError(statusCode, message) {
 this.statusCode = statusCode;
 this.message = message;
 this.stack = new Error().stack;};


exports.tracer = null;

exports.HttpContext = function(request, response, options) {
 if ((request == null)) {
 return };
 options = (options || { });

 if (exports.tracer) {
 exports.tracer((((("\nHTTP REQUEST: " + request.method) + " ") + request.url) + "\n"));
 exports.tracer((("headers: " + JSON.stringify(request.headers)) + "\n")); };


 this.request = request;
 this.response = response;
 this.method = ((request.headers[(options.methodHeader || "x-http-method-override")] || request.method)).toLowerCase();

 var _split = request.url.split("?");
 this.path = _split.splice(0, 1)[0];
 var _urlBegin = ((((request.socket.secure ? "https" : "http")) + "://") + request.headers.host);
 this.url = (_urlBegin + this.path);
 this.rawQuery = _split.join("?");
 this.query = urlHelper.parseQueryString(this.rawQuery);
 var _segments = this.path.split("/").map(function(seg) {
 return decodeURIComponent(seg); });

 var _segI = 1;
 this.walkUrl = function() {
 return _segments[_segI++]; };

 this.walked = function() {
 return (_urlBegin + _segments.slice(0, _segI).join("/")); };



 this.rawAccept = ((this.query[options.acceptParam] || request.headers.accept) || "*");
 this.accept = exports.parseAccept(this.rawAccept);


 this.parseBody = function parseBody__1(_) { var ct, str; var __frame = { name: "parseBody__1", line: 131 }; return __func(_, this, arguments, parseBody__1, 0, __frame, function __$parseBody__1() {
 ct = request.headers["content-type"];
 if (!ct) {
 return _(null, null); } ;
 if ((ct.indexOf("application/json") !== 0)) {
 return _(new HttpError(415, ("expected application/json, got: " + ct))); } ;


 return request.readAll(__cb(_, __frame, 8, 12, function ___(__0, __1) { str = __1;
 if ((str == null)) {
 return _(null, null); } ;
 if (exports.tracer) {
 exports.tracer((("body: " + str) + "\n")); } ;
 return _(null, JSON.parse(str)); })); }); };


 this.reply = function(code, message, headers) {
 headers = (headers || { });
 if ((message && !headers["content-type"])) {
 headers["content-type"] = "text/plain"; };
 response.writeHead(code, headers);
 response.end(message); };


 this.scratch = { };};