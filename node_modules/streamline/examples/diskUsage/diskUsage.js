/*** Generated by streamline 0.1.44rt1 - DO NOT EDIT ***/
var __rt=require('streamline/lib/compiler/runtime')(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__trap=__rt.__trap,__propagate=__rt.__propagate,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
            (function main(_) {
              var fs, p, t0;
/*    13 */   function du(_, path) {
                var total, stat, files, i;
                var __frame = {
                  name: "du",
                  line: 13
                };
                return __func(_, this, arguments, du, 0, __frame, function __$du() {
/*    14 */       total = 0;
/*    15 */       return fs.stat(path, __cb(_, __frame, 2, 12, function ___(__0, __1) {
                    stat = __1;
                    return (function __$du(__then) {
/*    16 */           if (stat.isFile()) {
/*    17 */             return fs.readFile(path, __cb(_, __frame, 4, 11, function ___(__0, __2) {
/*    17 */               total += __2.length;
                          __then();
                        }));
                      }
                       else {
                        return (function __$du(__then) {
/*    19 */               if (stat.isDirectory()) {
/*    20 */                 return fs.readdir(path, __cb(_, __frame, 7, 14, function ___(__0, __3) {
                              files = __3;
/*    21 */                   i = 0;
                              var __9 = false;
                              return (function ___(__break) {
                                var __more;
                                var __loop = __cb(_, __frame, 0, 0, function __$du() {
                                  __more = false;
                                  if (__9) {
/*    21 */                         i++;
                                  }
                                   else {
                                    __9 = true;
                                  }
                                ;
/*    21 */                       var __8 = (i < files.length);
                                  if (__8) {
/*    22 */                         return du(__cb(_, __frame, 9, 12, function ___(__0, __4) {
/*    22 */                           total += __4;
                                      while (__more) {
                                        __loop();
                                      };
                                      __more = true;
/*    22 */                         }), ((path + "/") + files[i]));
                                  }
                                   else {
                                    __break();
                                  }
                                ;
                                });
                                do {
                                  __loop();
                                } while (__more);
                                __more = true;
                              })(function __$du() {
/*    24 */                     console.log(((path + ": ") + total));
                                __then();
                              });
                            }));
                          }
                           else {
/*    27 */                 console.log((path + ": odd file"));
                            __then();
                          }
                        ;
                        })(__then);
                      }
                    ;
                    })(function __$du() {
/*    29 */           return _(null, total);
                    });
                  }));
                });
              };
              var __frame = {
                name: "main",
                line: 1
              };
              return __func(_, this, arguments, main, 0, __frame, function __$main() {
/*    11 */     fs = require("fs");
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$main() {
/*    33 */           p = ((process.argv.length > 2) ? process.argv[2] : ".");
/*    35 */           t0 = Date.now();
/*    36 */           return du(__cb(_, __frame, 35, 1, function __$main() {
/*    37 */             console.log((("completed in " + ((Date.now() - t0))) + " ms"));
                        __then();
/*    36 */           }), p);
                    });
                  })(function ___(ex, __result) {
                    __tryCatch(_, function __$main() {
                      if (ex) {
/*    40 */             console.error(ex.stack);
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                    ;
                    });
                  });
                })(function ___() {
                  __tryCatch(_, _);
                });
              });
            }).call(this, __trap);
